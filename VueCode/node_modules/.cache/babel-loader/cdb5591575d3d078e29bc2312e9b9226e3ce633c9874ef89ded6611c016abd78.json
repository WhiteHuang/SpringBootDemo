{"ast":null,"code":"// ------------- 后端未跨域设置------------------\n// import axios from 'axios'\n//\n// const request = axios.create({\n//     baseURL: '/api',  // 注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上'/api'前缀在，页面里面写接口的时候就不要加 '/api'了，否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\n//     timeout: 5000\n// })\n//\n// // request 拦截器\n// // 可以自请求发送前对请求做一些处理\n// // 比如统一加token，对请求参数统一加密\n// request.interceptors.request.use(config => {\n//     config.headers['Content-Type'] = 'application/json;charset=utf-8';\n//\n//     // config.headers['token'] = user.token;  // 设置请求头\n//     return config\n// }, error => {\n//     return Promise.reject(error)\n// });\n//\n// // response 拦截器\n// // 可以在接口响应后统一处理结果\n// request.interceptors.response.use(\n//     response => {\n//         let res = response.data;\n//         // 如果是返回的文件\n//         if (response.config.responseType === 'blob') {\n//             return res\n//         }\n//         // 兼容服务端返回的字符串数据\n//         if (typeof res === 'string') {\n//             res = res ? JSON.parse(res) : res\n//         }\n//         return res;\n//     },\n//     error => {\n//         console.log('err' + error) // for debug\n//         return Promise.reject(error)\n//     }\n// )\n//\n//\n// export default request\n\n// ------------- 后端已经有跨域设置------------------\nimport axios from 'axios';\nimport ElementUI from \"element-ui\";\nimport { serverIp } from \"../../public/config\";\nconst request = axios.create({\n  baseURL: `http://${serverIp}:9090`,\n  // 注意！！ 这里是全局统一加上了 后端接口前缀 前缀，后端必须进行跨域配置！\n  timeout: 5000\n});\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8';\n  let token = localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")).token : null;\n  if (token) {\n    config.headers['token'] = token;\n  } // 设置请求头\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(response => {\n  console.log(\"response\");\n  let res = response.data;\n  // 如果是返回的文件\n  if (response.config.responseType === 'blob') {\n    return res;\n  }\n  // 兼容服务端返回的字符串数据\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n  if (res.code === '401') {\n    ElementUI.Message({\n      message: res.msg,\n      type: \"error\"\n    });\n  }\n  return res;\n}, error => {\n  console.log('err' + error); // for debug\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","ElementUI","serverIp","request","create","baseURL","timeout","interceptors","use","config","headers","token","localStorage","getItem","JSON","parse","error","Promise","reject","response","console","log","res","data","responseType","code","Message","message","msg","type"],"sources":["E:/project/java/SpringBootDemo/vue/src/utils/request.js"],"sourcesContent":["// ------------- 后端未跨域设置------------------\r\n// import axios from 'axios'\r\n//\r\n// const request = axios.create({\r\n//     baseURL: '/api',  // 注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上'/api'前缀在，页面里面写接口的时候就不要加 '/api'了，否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\r\n//     timeout: 5000\r\n// })\r\n//\r\n// // request 拦截器\r\n// // 可以自请求发送前对请求做一些处理\r\n// // 比如统一加token，对请求参数统一加密\r\n// request.interceptors.request.use(config => {\r\n//     config.headers['Content-Type'] = 'application/json;charset=utf-8';\r\n//\r\n//     // config.headers['token'] = user.token;  // 设置请求头\r\n//     return config\r\n// }, error => {\r\n//     return Promise.reject(error)\r\n// });\r\n//\r\n// // response 拦截器\r\n// // 可以在接口响应后统一处理结果\r\n// request.interceptors.response.use(\r\n//     response => {\r\n//         let res = response.data;\r\n//         // 如果是返回的文件\r\n//         if (response.config.responseType === 'blob') {\r\n//             return res\r\n//         }\r\n//         // 兼容服务端返回的字符串数据\r\n//         if (typeof res === 'string') {\r\n//             res = res ? JSON.parse(res) : res\r\n//         }\r\n//         return res;\r\n//     },\r\n//     error => {\r\n//         console.log('err' + error) // for debug\r\n//         return Promise.reject(error)\r\n//     }\r\n// )\r\n//\r\n//\r\n// export default request\r\n\r\n\r\n// ------------- 后端已经有跨域设置------------------\r\nimport axios from 'axios'\r\nimport ElementUI from \"element-ui\";\r\nimport {serverIp} from \"../../public/config\";\r\n\r\n\r\nconst request = axios.create({\r\n    baseURL: `http://${serverIp}:9090`,  // 注意！！ 这里是全局统一加上了 后端接口前缀 前缀，后端必须进行跨域配置！\r\n    timeout: 5000\r\n})\r\n\r\n// request 拦截器\r\n// 可以自请求发送前对请求做一些处理\r\n// 比如统一加token，对请求参数统一加密\r\nrequest.interceptors.request.use(config => {\r\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\r\n    let token = localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")).token : null\r\n    if (token) {\r\n        config.headers['token'] = token;\r\n    }  // 设置请求头\r\n    return config\r\n}, error => {\r\n    return Promise.reject(error)\r\n});\r\n\r\n// response 拦截器\r\n// 可以在接口响应后统一处理结果\r\nrequest.interceptors.response.use(\r\n    response => {\r\n        console.log(\"response\")\r\n        let res = response.data;\r\n        // 如果是返回的文件\r\n        if (response.config.responseType === 'blob') {\r\n            return res\r\n        }\r\n        // 兼容服务端返回的字符串数据\r\n        if (typeof res === 'string') {\r\n            res = res ? JSON.parse(res) : res\r\n        }\r\n        if(res.code==='401'){\r\n            ElementUI.Message(\r\n                {message: res.msg,\r\n                type: \"error\"}\r\n            );\r\n        }\r\n        return res;\r\n    },\r\n    error => {\r\n        console.log('err' + error) // for debug\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n\r\nexport default request\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,SAAQC,QAAQ,QAAO,qBAAqB;AAG5C,MAAMC,OAAO,GAAGH,KAAK,CAACI,MAAM,CAAC;EACzBC,OAAO,EAAG,UAASH,QAAS,OAAM;EAAG;EACrCI,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACA;AACA;AACAH,OAAO,CAACI,YAAY,CAACJ,OAAO,CAACK,GAAG,CAACC,MAAM,IAAI;EACvCA,MAAM,CAACC,OAAO,CAAC,cAAc,CAAC,GAAG,gCAAgC;EACjE,IAAIC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,CAACF,KAAK,GAAG,IAAI;EAChG,IAAIA,KAAK,EAAE;IACPF,MAAM,CAACC,OAAO,CAAC,OAAO,CAAC,GAAGC,KAAK;EACnC,CAAC,CAAE;EACH,OAAOF,MAAM;AACjB,CAAC,EAAEO,KAAK,IAAI;EACR,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CAAC;;AAEF;AACA;AACAb,OAAO,CAACI,YAAY,CAACY,QAAQ,CAACX,GAAG,CAC7BW,QAAQ,IAAI;EACRC,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;EACvB,IAAIC,GAAG,GAAGH,QAAQ,CAACI,IAAI;EACvB;EACA,IAAIJ,QAAQ,CAACV,MAAM,CAACe,YAAY,KAAK,MAAM,EAAE;IACzC,OAAOF,GAAG;EACd;EACA;EACA,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IACzBA,GAAG,GAAGA,GAAG,GAAGR,IAAI,CAACC,KAAK,CAACO,GAAG,CAAC,GAAGA,GAAG;EACrC;EACA,IAAGA,GAAG,CAACG,IAAI,KAAG,KAAK,EAAC;IAChBxB,SAAS,CAACyB,OAAO,CACb;MAACC,OAAO,EAAEL,GAAG,CAACM,GAAG;MACjBC,IAAI,EAAE;IAAO,CACjB,CAAC;EACL;EACA,OAAOP,GAAG;AACd,CAAC,EACDN,KAAK,IAAI;EACLI,OAAO,CAACC,GAAG,CAAC,KAAK,GAAGL,KAAK,CAAC,EAAC;EAC3B,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAGD,eAAeb,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}